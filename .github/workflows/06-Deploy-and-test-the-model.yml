name: Create Endpoint and Deploy Model

on:
  workflow_dispatch:

jobs:
  deploy-model:
    runs-on: ubuntu-latest
    environment:
      name: prod_env

    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@main

      # Step 2: Install the Azure ML CLI extension
      - name: Install az ml extension
        run: az extension add -n ml -y

      # Step 3: Azure login
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 4: Create a managed online endpoint
      - name: Create a managed online endpoint
        run: |
          # Check if endpoint exists and create or update accordingly
          if az ml online-endpoint show --name my-endpoint-mlopsibe --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}; then
            echo "Updating existing endpoint..."
            az ml online-endpoint update --name my-endpoint-mlopsibe -f endpoints/online/endpoint.yml --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}
          else
            echo "Creating new endpoint..."
            az ml online-endpoint create --name my-endpoint-mlopsibe -f endpoints/online/endpoint.yml --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}
          fi

          # Endpoint details
          echo "Endpoint details:"
          az ml online-endpoint show --name my-endpoint-mlopsibe --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}

      # Step 5: Create the deployment
      - name: Create the deployment
        run: |
          # Log model details
          echo "Model details:"
          az ml model show --name model-registered --version 1 --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}

          # Check if deployment exists and create or update accordingly
          if az ml online-deployment show --name my-deployment --endpoint my-endpoint-mlopsibe --resource-group ${{ secrets.RESOURCE_GROUP }} --workspace-name ${{ secrets.WORKSPACE_NAME }}; then
            echo "Updating existing deployment..."
            az ml online-deployment update \
              --name my-deployment \
              --endpoint my-endpoint-mlopsibe \
              -f endpoints/online/deployment.yml \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --workspace-name ${{ secrets.WORKSPACE_NAME }}
          else
            echo "Creating new deployment..."
            az ml online-deployment create \
              --name my-deployment \
              --endpoint my-endpoint-mlopsibe \
              -f endpoints/online/deployment.yml \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --workspace-name ${{ secrets.WORKSPACE_NAME }} \
              --all-traffic
          fi

          # Verify the deployment
          echo "Verifying the deployment..."
          az ml online-deployment show \
            --name my-deployment \
            --endpoint my-endpoint-mlopsibe \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --workspace-name ${{ secrets.WORKSPACE_NAME }}


      # Step 6: Invoke the endpoint for multiple examples
      #- name:  Deployment Traffic Allocation configuration
      #  run: |
      #    # Check Deployment Traffic Allocation
      #    az ml online-endpoint update-traffic \
      #      --name my-endpoint-mlopsibe
      #      --traffic my-deployment=100

       #   # Verify Deployment Status:
       #   az ml online-deployment show \
       #     --name my-deployment
       #     --endpoint my-endpoint-mlopsibe

      - name: Invoke the endpoint for example 1
        run: |
          # Invoke the endpoint to validate deployment
          echo "Invoking the endpoint..."
          az ml online-endpoint invoke \
            --name my-endpoint-mlopsibe \
            --deployment-name my-deployment\
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --workspace-name ${{ secrets.WORKSPACE_NAME }} \
            --request-file endpoints/online/sample-request-1.json || { echo 'Endpoint invocation failed'; exit 1; }

      - name: Invoke the endpoint for example 2
        run: |
          # Invoke the endpoint to validate deployment
          echo "Invoking the endpoint..."
          az ml online-endpoint invoke \
            --name my-endpoint-mlopsibe \
            --deployment-name my-deployment\
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --workspace-name ${{ secrets.WORKSPACE_NAME }} \
            --request-file endpoints/online/sample-request-2.json || { echo 'Endpoint invocation failed'; exit 1; }

      - name: Invoke the endpoint for example 3
        run: |
          # Invoke the endpoint to validate deployment
          echo "Invoking the endpoint..."
          az ml online-endpoint invoke \
            --name my-endpoint-mlopsibe \
            --deployment-name my-deployment\
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --workspace-name ${{ secrets.WORKSPACE_NAME }} \
            --request-file endpoints/online/sample-request-3.json || { echo 'Endpoint invocation failed'; exit 1; }

      - name: Invoke the endpoint for example 4
        run: |
          # Invoke the endpoint to validate deployment
          echo "Invoking the endpoint..."
          az ml online-endpoint invoke \
            --name my-endpoint-mlopsibe \
            --deployment-name my-deployment\
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --workspace-name ${{ secrets.WORKSPACE_NAME }} \
            --request-file endpoints/online/sample-request-4.json || { echo 'Endpoint invocation failed'; exit 1; }
